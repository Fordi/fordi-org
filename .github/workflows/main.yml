name: Combined build/deploy
on:
  push:
    branches: [main]
    tags: [v*]

permissions:
  contents: write
  pages: write
  id-token: write
  pull-requests: write

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: false

jobs:
  check_docs:
    if: ${{ endsWith(github.ref, '/main') }}
    runs-on: ubuntu-latest
    outputs:
      update_needed: ${{ steps.check.outputs.md_newer }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: check
        run: |
          SRC="$(git log -n 1 --format='%ct' -- docs/res/Bryan_Elliott.md)"
          DEST="$(git log -n 1 --format='%ct' -- docs/res/Bryan_Elliott.docx)"
          if [[ $SRC > $DEST ]]; then
            echo "md_newer=yes" >> $GITHUB_OUTPUT
            echo ".md is newer than .docx; scheduling update"
          else
            echo ".md is older than .docx; skipping"
          fi

  build_docs:
    needs: check_docs
    if: needs.check_docs.outputs.update_needed == 'yes'
    runs-on: ubuntu-latest
    container: pandoc/core
    steps:
      - uses: actions/checkout@v4
      - run: pandoc docs/res/Bryan_Elliott.md -o docs/res/Bryan_Elliott.docx
      - uses: actions/upload-artifact@v4
        with:
          name: word-resume
          path: docs/res/Bryan_Elliott.docx

  commit_docs:
    needs: build_docs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - run: |
          SRC="$(git log -n 1 --format='%ct' -- docs/res/Bryan_Elliott.md)"
          DEST="$(git log -n 1 --format='%cN' -- docs/res/Bryan_Elliott.docx)"
          echo "$SRC > $DEST" | bc || echo "NEEDS_UPDATE=yes" >> $GITHUB_ENV
      - run: |
          git config --global user.email "$(git log -n 1 --format='%cN' -- docs/res/Bryan_Elliott.md)"
          git config --global user.name "$(git log -n 1 --format='%ce' -- docs/res/Bryan_Elliott.md)"
      - uses: actions/download-artifact@v4
        with:
          name: word-resume
          path: docs/res
      - name: Amend last commit to include docx update
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          git checkout -b "build/${{ github.ref_name }}-${{ github.run_number }}"
          git add docs/res/Bryan_Elliott.docx
          git commit -m "Automatic Word resume update"
          git push --force -u origin "build/${{ github.ref_name }}-${{ github.run_number }}"
          gh pr create -t "Automatic Word resume update" -l "maint" -B "${{ github.ref_name }}" -b "Generated via workflow"
          PR="$(gh pr list -H "build/${{ github.ref_name }}-${{ github.run_number }}" --json number --jq '.[].number')"
          gh pr merge "$PR" --squash --admin

  deploy_to_staging:
    needs: commit_docs
    # also covered in branch protection rules; this prevents run failure
    if: |
      always() && (
        github.ref == 'refs/heads/main'
      )
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/configure-pages@v5
      - uses: actions/upload-pages-artifact@v3
        with:
          path: './docs/'
      - id: deployment
        uses: actions/deploy-pages@v4

  deploy_to_production:
    needs: commit_docs
    # also covered in branch protection rules; this prevents run failure
    if: |
      always() && (
        startsWith(github.ref, 'refs/tags/v')
      )
    runs-on: ubuntu-latest
    environment: Dreamhost
    steps:
      - uses: actions/checkout@master
      - name: Secure Copy
        uses: nogsantos/ssh-scp-deploy@v1.3.0
        with:
          src: ./docs/*
          host: ${{ vars.SSH_HOST }}
          remote: ${{ vars.SSH_DIR }}
          port: ${{ vars.SSH_PORT }}
          user: ${{ vars.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
